---
description:
globs:
alwaysApply: false
---
本项目基于`nestjs`框架进行开发，适用于具有单数据库多租户、JWT 身份验证、CASL 授权、MIKRO-ORM 租户实施等的 SaaS 应用程序。架构如下：
```
src/
├── app.module.ts         # 主应用模块
├── main.ts              # 应用入口文件
├── auth/                # 认证模块
│   ├── auth.controller.ts   # 认证接口
│   ├── auth.service.ts      # 认证业务逻辑
│   ├── jwt.strategy.ts      # JWT认证策略
│   └── local.strategy.ts    # 本地认证策略
├── casl/                # 权限控制模块
│   └── casl.module.ts       # CASL权限配置
├── common/              # 公共工具与装饰器
│   ├── decorators/         # 自定义装饰器
│   │   ├── metadata/          # 元数据装饰器（@Public, @CheckPolicies）
│   │   └── requests/          # 请求相关装饰器（@LoggedUser, @Tenant）
│   ├── factories/          # 工厂类（CaslAbilityFactory）
│   ├── guards/             # 自定义守卫（JwtAuthGuard, PoliciesGuard）
│   ├── interfaces/         # TypeScript接口
│   └── validators/         # 自定义校验器
├── config/              # 配置文件
│   ├── auth.config.ts      # 认证配置
│   ├── database.config.ts  # 数据库配置
│   ├── mikro-orm.config.ts # MikroORM配置
│   └── tenant.config.ts    # 租户配置
├── database/            # 数据库迁移与种子数据
│   ├── migrations/         # 数据库迁移文件
│   │   ├── Migration20250624191426_CreateTenantTable.ts
│   │   ├── Migration20250624195947_CreateOrganizationTable.ts
│   │   └── Migration20250622193541_init_data.ts  # 权限初始化
│   └── seeders/            # 数据库种子数据
├── entities/            # 数据库实体
│   ├── base.entity.ts      # 基础实体类
│   ├── organization.entity.ts
│   ├── permission.entity.ts  # CASL权限实体
│   ├── role.entity.ts        # 带权限的角色实体
│   ├── tenant.entity.ts
│   └── user.entity.ts
├── organizations/       # 组织模块
│   ├── organizations.controller.ts
│   ├── organizations.service.ts
│   └── policies/           # 组织相关策略
├── tenants/             # 租户管理模块
│   ├── tenants.module.ts   # 租户模块配置
│   ├── tenants.interceptor.ts # 租户过滤拦截器
│   └── subscribers/        # 租户相关实体订阅器
├── users/               # 用户管理模块
│   ├── users.controller.ts # 用户接口
│   ├── users.service.ts    # 用户业务逻辑
│   ├── dto/                # 数据传输对象
│   ├── policies/           # 用户相关策略
│   └── validators/         # 用户专用校验器
└── validators/          # 通用自定义校验器模块
```